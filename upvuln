#!/usr/bin/bash

# ✨ System Update, Upgrade, and Cleanup Script ✨

# Define Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to display a progress bar
progress_bar() {
    local duration=$1
    local width=50 # Width of the progress bar
    for ((i = 0; i <= 100; i++)); do
        sleep "$duration"
        # Calculate the number of filled and empty blocks
        filled=$((i * width / 100))
        empty=$((width - filled))
        # Create the progress bar string
        bar=$(printf "%-${filled}s" | tr ' ' '█')$(printf "%-${empty}s")
        # Print the progress bar with percentage
        printf "\r${GREEN}Progress: [%3d%%]${NC} [${YELLOW}%s${NC}]" $i "$bar"
    done
    echo ""
}

# 🛠️ Check if the script is run as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}🚫 Error: This script must be run as root. Use sudo!${NC}"
    exit 1
fi

echo -e "${PURPLE}🚀 Starting system update, upgrade, and cleanup process...${NC}"

# -------------------------
# Region --- Updates
# -------------------------
echo -e "${PURPLE}RUNNING: Updating package lists...${NC}"
sudo apt clean
sudo apt update --fix-missing &
progress_bar 0.1 # Adjust the duration for the progress bar
wait $!
if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}✅ SUCCESS: Package lists updated successfully.${NC}\n"
else
    echo -e "\n${RED}❌ FAILED: Failed to update package lists.${NC}\n"
    exit 1
fi

# -------------------------
# Region --- Upgrades
# -------------------------
echo -e "${PURPLE}RUNNING: Upgrading installed packages...${NC}"
sudo apt full-upgrade -y &
progress_bar 0.1 # Adjust the duration for the progress bar
wait $!
if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}✅ SUCCESS: Installed packages upgraded successfully.${NC}\n"
else
    echo -e "\n${RED}❌ FAILED: Failed to upgrade installed packages.${NC}\n"
    exit 1
fi

# -------------------------
# Region --- Autoremove
# -------------------------
echo -e "${PURPLE}RUNNING: Removing unused packages...${NC}"
sudo apt autoremove -y &
progress_bar 0.1 # Adjust the duration for the progress bar
wait $!
if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}✅ SUCCESS: Unused packages removed successfully.${NC}\n"
else
    echo -e "\n${RED}❌ FAILED: Failed to remove unused packages.${NC}\n"
    exit 1
fi

# -------------------------
# Region --- Cleanup
# -------------------------
echo -e "${PURPLE}RUNNING: Cleaning cached package files...${NC}"
sudo apt autoclean &
progress_bar 0.1 # Adjust the duration for the progress bar
wait $!
if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}✅ SUCCESS: Cached package files cleaned successfully.${NC}\n"
else
    echo -e "\n${RED}❌ FAILED: Failed to clean cached package files.${NC}\n"
    exit 1
fi

# -------------------------
# Region --- Dependency Fixes
# -------------------------
echo -e "${PURPLE}RUNNING: Fixing broken dependencies...${NC}"
dpkg --configure -a && apt install -f -y &
progress_bar 0.1 # Adjust the duration for the progress bar
wait $!
if [[ $? -eq 0 ]]; then
    echo -e "\n${GREEN}✅ SUCCESS: Broken dependencies fixed successfully.${NC}\n"
else
    echo -e "\n${RED}❌ FAILED: Failed to fix broken dependencies.${NC}\n"
    exit 1
fi

# -------------------------
# Region --- Self-Move
# -------------------------
echo -e "${PURPLE}📦 Moving upvuln to /usr/local/bin/...${NC}"

# Check if the script already exists in /usr/local/bin/
if [[ -f "/usr/local/bin/upvuln" ]]; then
    echo -e "${YELLOW}ℹ️ INFO: upvuln already exists in /usr/local/bin/. Skipping move.${NC}"
else
    if mv "$0" /usr/local/bin/upvuln; then
        echo -e "${GREEN}✅ SUCCESS: upvuln moved to /usr/local/bin/ successfully.${NC}"
    else
        echo -e "${RED}❌ FAILED: Failed to move upvuln to /usr/local/bin/.${NC}"
        exit 1
    fi
fi

# -------------------------
# Region --- Exiting
# -------------------------
echo -e "${PURPLE}Exiting BasherUpdate...${NC}\n"
exit 0
